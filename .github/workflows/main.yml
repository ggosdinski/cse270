name: Simple CI/CD Pipeline for CSE 270

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Paso 1: Checkout del código
      - name: Checkout the latest code
        uses: actions/checkout@v4.1.2

      # Paso 2: Configurar Python 3.12
      - name: Set up Python 3.12
        uses: actions/setup-python@v5.0.0
        with:
          python-version: "3.12"

      # Paso 3: Instalar dependencias
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest requests pytest-mock selenium requests-mock coverage
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # Paso 4: Linting con flake8
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      # Paso 5: Iniciar servidor Django para pruebas
      - name: Set up and start Django HTTP Server for testing
        run: |
          nohup python manage.py runserver 0.0.0.0:8000 &
          sleep 10  # Espera a que el servidor se inicie

      # Paso 6: Ejecutar pruebas
      - name: Run tests
        run: |
          pytest --maxfail=1 --disable-warnings -q

  analyze:
    needs: build
    name: Analyze
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ["javascript"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.2

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  deploy:
    needs: analyze
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      # Paso 1: Checkout del código
      - name: Checkout
        uses: actions/checkout@v4.1.2

      # Paso 2: Configuración de Pages
      - name: Setup Pages
        uses: actions/configure-pages@v4.0.0

      # Paso 3: Subir el artefacto
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3.0.1
        with:
          path: "teton/1.6"

      # Paso 4: Desplegar a GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4.0.5
